package id.ac.ui.cs.advprog.perbaikiinaja.ServiceOrder.service;

import id.ac.ui.cs.advprog.perbaikiinaja.ServiceOrder.model.ServiceOrder;
import id.ac.ui.cs.advprog.perbaikiinaja.ServiceOrder.model.ServiceOrderStatus;
import id.ac.ui.cs.advprog.perbaikiinaja.ServiceOrder.repository.ServiceOrderRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.stereotype.Service;

import jakarta.persistence.EntityNotFoundException;
import jakarta.transaction.Transactional;
import java.util.List;
import java.util.Optional;
import java.util.UUID;

@Service
@RequiredArgsConstructor
public class ServiceOrderServiceImpl implements ServiceOrderService {

    private final ServiceOrderRepository repo;

    @Override
    public ServiceOrder create(ServiceOrder serviceOrder) {
        // UUID is now generated by Hibernate
        serviceOrder.setStatus(ServiceOrderStatus.WAITING_CONFIRMATION.name());
        return repo.save(serviceOrder);
    }

    @Override
    public List<ServiceOrder> findAll() {
        return repo.findAll();
    }

    @Override
    public Optional<ServiceOrder> findById(UUID id) {
        return repo.findById(id);
    }

    @Override
    @Transactional
    public Optional<ServiceOrder> update(UUID id, ServiceOrder updated) {
        return repo.findById(id)
                .filter(o -> ServiceOrderStatus.WAITING_CONFIRMATION.name().equals(o.getStatus()))
                .map(existing -> {
                    existing.setItemName(updated.getItemName());
                    existing.setCondition(updated.getCondition());
                    existing.setProblemDescription(updated.getProblemDescription());
                    existing.setServiceDate(updated.getServiceDate());
                    existing.setPaymentMethod(updated.getPaymentMethod());
                    existing.setCouponApplied(updated.isCouponApplied());
                    existing.setTechnicianId(updated.getTechnicianId());
                    return existing;
                });
    }

    @Override
    public boolean delete(UUID id) {
        return repo.findById(id)
                .filter(o -> ServiceOrderStatus.WAITING_CONFIRMATION.name().equals(o.getStatus()))
                .map(o -> {
                    repo.deleteById(id);
                    return true;
                }).orElse(false);
    }

    @Override
    public ServiceOrder createOrder(ServiceOrder order) {
        return create(order);
    }

    @Override
    public List<ServiceOrder> getAllOrders() {
        return findAll();
    }

    @Override
    public ServiceOrder getOrderById(UUID id) {
        return repo.findById(id)
                .orElseThrow(() -> new EntityNotFoundException("ServiceOrder not found: " + id));
    }

    @Override
    public List<ServiceOrder> findOrdersByTechnicianId(String technicianId) {
        return repo.findByTechnicianId(technicianId);
    }
}
